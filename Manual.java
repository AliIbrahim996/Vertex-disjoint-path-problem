/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Ali_ibrahim
 */
public class Manual extends javax.swing.JFrame {

    AdjListGraph  ListGraph;
    AdjMatrixGraph MatrixGraph;
    VertexDisjoinPath VertexDisjointPath;
    String data;


    public Manual() {
        initComponents();
        String[] graphRepresentation = {"Matrix Representation", "List Representation"};

        for (int i = 0; i < graphRepresentation.length; i++) {
            selectType.addItem(graphRepresentation[i]);
        }
        data = "";
        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent we) {
                String ObjButtons[] = {"Yes", "No"};
                int PromptResult = JOptionPane.showOptionDialog(null, "Are you sure you want to exit?", "Manaual", JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, ObjButtons, ObjButtons[1]);
                if (PromptResult == JOptionPane.YES_OPTION) {
                    System.exit(0);
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        sourceNodeNumber = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        sinkNodeNumber = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        numberOfVertices = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        selectType = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        AugmintigPathType = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        startNode = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        targetNode = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        capacity = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jDraw = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Manually"));

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        sourceNodeNumber.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        sourceNodeNumber.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "select number" }));

        jLabel3.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        jLabel3.setText("Source Node ");

        sinkNodeNumber.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        sinkNodeNumber.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "select number" }));

        jLabel4.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        jLabel4.setText("Sink Node ");

        numberOfVertices.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        numberOfVertices.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                numberOfVerticesMouseExited(evt);
            }
        });
        numberOfVertices.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numberOfVerticesActionPerformed(evt);
            }
        });
        numberOfVertices.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                numberOfVerticesPropertyChange(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        jLabel1.setText("NumofVs");

        selectType.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        selectType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SelectType" }));
        selectType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectTypeActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        jLabel5.setText("graph representation");

        AugmintigPathType.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        AugmintigPathType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "selectMethod", "BFS", "WidestPath", "WidestPathWithLargestKey" }));

        jLabel2.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        jLabel2.setText("Augmnting Path Method");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addGap(12, 12, 12))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(numberOfVertices, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sourceNodeNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sinkNodeNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(AugmintigPathType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selectType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(numberOfVertices, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sourceNodeNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sinkNodeNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(selectType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AugmintigPathType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel7.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        jLabel7.setText("start node");

        startNode.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        startNode.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "select number" }));

        jLabel8.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        jLabel8.setText("target node");

        targetNode.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        targetNode.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "select number" }));

        jLabel9.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        jLabel9.setText("capacity");

        capacity.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N

        jButton1.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        jButton1.setText("add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(startNode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(targetNode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(capacity, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1))
                .addContainerGap(76, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(startNode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(targetNode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(capacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jScrollPane1.setViewportView(jTextArea1);

        jButton2.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        jButton2.setText("Done");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        jButton4.setText("Clear");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setFont(new java.awt.Font("Tempus Sans ITC", 1, 12)); // NOI18N
        jButton5.setText("Back");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jDraw.setText("Draw");
        jDraw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDrawActionPerformed(evt);
            }
        });

        jCheckBox1.setText("Solve vertex disjoint");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jCheckBox1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(221, 221, 221)))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton4)
                                .addGap(18, 18, 18)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jDraw, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jDraw))
                .addGap(36, 36, 36))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void numberOfVerticesMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_numberOfVerticesMouseExited
        sourceNodeNumber.removeAllItems();
        sinkNodeNumber.removeAllItems();
        startNode.removeAllItems();
        targetNode.removeAllItems();
        int numberOfVertices = 0;
        try {
            numberOfVertices = Integer.parseInt(this.numberOfVertices.getText());
        } catch (Exception e) {

        }

        //get number of vertices
        for (int i = 0; i < numberOfVertices; i++) {
            sourceNodeNumber.addItem(i + "");
            sinkNodeNumber.addItem(i + "");
            startNode.addItem(i + "");
            targetNode.addItem(i + "");

        }
    }//GEN-LAST:event_numberOfVerticesMouseExited

    private void numberOfVerticesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numberOfVerticesActionPerformed
        //fordFul=mc.parser(graphRepresentation.getSelectedIndex()+1,represntation);
        sourceNodeNumber.removeAllItems();
        sinkNodeNumber.removeAllItems();
        startNode.removeAllItems();
        targetNode.removeAllItems();
        int numberOfVertices = 0;
        try {
            numberOfVertices = Integer.parseInt(this.numberOfVertices.getText());
        } catch (Exception e) {

        }
        // TODO add your handling code here:
    }//GEN-LAST:event_numberOfVerticesActionPerformed

    private void numberOfVerticesPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_numberOfVerticesPropertyChange
        // TODO add your handling code here:
        sourceNodeNumber.removeAllItems();
        sinkNodeNumber.removeAllItems();
        startNode.removeAllItems();
        targetNode.removeAllItems();
        int numberOfVertices = 0;
        try {
            numberOfVertices = Integer.parseInt(this.numberOfVertices.getText());
        } catch (Exception e) {

        }
    }//GEN-LAST:event_numberOfVerticesPropertyChange

    private void selectTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectTypeActionPerformed
        // TODO add your handling code here:
        int numofv = Integer.parseInt(numberOfVertices.getText());
        if (selectType.getSelectedItem().equals("Matrix Representation")) {
            MatrixGraph = new AdjMatrixGraph(numofv);
            data += "Creating AdjMatrixGraph" + "------------------\n";
        } else if (selectType.getSelectedItem().equals("List Representation")) {
            ListGraph = new AdjListGraph(numofv);
            data += "Creating AdjListGraph" + "------------------\n";
        }
    }//GEN-LAST:event_selectTypeActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        int startNode = Integer.parseInt((String) this.startNode.getSelectedItem());
        int targetNode = Integer.parseInt((String) this.targetNode.getSelectedItem());
        int weight = Integer.parseInt(capacity.getText());
        if (startNode == targetNode) {
            JOptionPane.showMessageDialog(null, "Erro\nAdding self edge");
        } else if (selectType.getSelectedItem().equals("Matrix Representation")) {
            if (!MatrixGraph.checkEdge(startNode, targetNode) && !MatrixGraph.checkEdge(targetNode, startNode)) {
                MatrixGraph.addEdge(startNode, targetNode, weight);
                data += startNode + "---" + weight + "-->" + targetNode + System.getProperty("line.separator");
            } else {
                JOptionPane.showMessageDialog(null, "There is an edge between " + startNode + " and " + targetNode);
            }

        } else if (selectType.getSelectedItem().equals("List Representation")) {
            if (!ListGraph.cheackEdge(startNode, targetNode) && !ListGraph.cheackEdge(targetNode, startNode)) {
                ListGraph.addEdge(startNode, targetNode, weight);
                data += startNode + "---" + weight + "-->" + targetNode + System.getProperty("line.separator");
            } else {
                JOptionPane.showMessageDialog(null, "There is an edge between " + startNode + " and " + targetNode);
            }

        }

        jTextArea1.setText(data);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        selectType.setSelectedIndex(0);
        numberOfVertices.setText("");
        sourceNodeNumber.removeAllItems();
        sinkNodeNumber.removeAllItems();
        startNode.removeAllItems();
        targetNode.removeAllItems();
        capacity.setText("");
        jTextArea1.setText("");
        data = "";
        ListGraph = null;
        MatrixGraph = null;
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if (jCheckBox1.isSelected()) {
            
            int source = Integer.parseInt((String) sourceNodeNumber.getSelectedItem());
            int sink = Integer.parseInt((String) sinkNodeNumber.getSelectedItem());
            if (selectType.getSelectedItem().equals("Matrix Representation")) {
                MatrixGraph.zeroFlow();
                
                

                if (AugmintigPathType.getSelectedItem().equals("BFS")) {
                    
                    VertexDisjointPath = new VertexDisjoinPath(MatrixGraph, source, sink);
                    AdjMatrixGraph Rgraph = VertexDisjointPath.matrixGraph.createResduialGraph();
                    data += "Running Ford-Fulkerson Algorithm";
                    jTextArea1.setText(data);
                    int max_flow = VertexDisjointPath.vdp_BFS(Rgraph, source, sink);
                    data += "The maximum num of disjoint paths is " + max_flow;
                    jTextArea1.setText(data);
                    int numofv = Integer.parseInt(numberOfVertices.getText());
                    data = VertexDisjointPath.matrixGraph.printFlow(numofv);
                    JOptionPane.showMessageDialog(null, " Flow throw Edges \n" + data + "\n The maximum num of disjoint paths is " + max_flow);
                } else if (AugmintigPathType.getSelectedItem().equals("WidestPath")) {
                    
                    VertexDisjointPath = new VertexDisjoinPath(MatrixGraph, source, sink);
                    AdjMatrixGraph Rgraph = VertexDisjointPath.matrixGraph.createResduialGraph();
                    int max_flow = VertexDisjointPath.vdp_WidestPath(Rgraph, source, sink);
                    data += "The maximum num of disjoint paths is " + max_flow;
                    jTextArea1.setText(data);
                    int numofv = Integer.parseInt(numberOfVertices.getText());
                    data = VertexDisjointPath.matrixGraph.printFlow(numofv);
                    JOptionPane.showMessageDialog(null, " Flow throw Edges \n" + data + "\n" + "The maximum num of disjoint paths is " + max_flow);
                } else if (AugmintigPathType.getSelectedItem().equals("WidestPathWithLargestKey")) {
                    VertexDisjointPath = new VertexDisjoinPath(MatrixGraph, source, sink);
                    AdjMatrixGraph Rgraph = VertexDisjointPath.matrixGraph.createResduialGraph();
                    int max_flow = VertexDisjointPath.vdp_WidestPathLargetKey(Rgraph, source, sink);
                    data += "The maximum num of disjoint paths is " + max_flow;
                    jTextArea1.setText(data);
                    int numofv = Integer.parseInt(numberOfVertices.getText());
                    data = VertexDisjointPath.matrixGraph.printFlow(numofv);
                    JOptionPane.showMessageDialog(null, " Flow throw Edges\n " + data + "\n" + "The maximum num of disjoint paths is " + max_flow);
                }
            } else if (selectType.getSelectedItem().equals("List Representation")) {
                ListGraph.zeroFlow();
                if (AugmintigPathType.getSelectedItem().equals("BFS")) {
                    VertexDisjointPath = new VertexDisjoinPath(ListGraph, source, sink);
                    AdjListGraph RListgraph = VertexDisjointPath.listGraph.creatResidualGraph();
                    int max_flow = VertexDisjointPath.vdp_BFS(RListgraph, source, sink);
                    data += "The maximum num of disjoint paths is " + max_flow;
                    jTextArea1.setText(data);
                    int numofv = Integer.parseInt(numberOfVertices.getText());
                    data = VertexDisjointPath.listGraph.printFlow(numofv);
                  JOptionPane.showMessageDialog(null, " Flow throw Edges\n " + data + "\n" + "The maximum num of disjoint paths is " + max_flow);
                } else if (AugmintigPathType.getSelectedItem().equals("WidestPath")) {
                    VertexDisjointPath = new VertexDisjoinPath(ListGraph, source, sink);
                    AdjListGraph RListgraph = VertexDisjointPath.listGraph.creatResidualGraph();
                    int max_flow = VertexDisjointPath.vdp_WidestPath(RListgraph, source, sink);
                    data += "The maximum num of disjoint paths is " + max_flow;
                    jTextArea1.setText(data);
                    int numofv = Integer.parseInt(numberOfVertices.getText());
                    data = VertexDisjointPath.listGraph.printFlow(numofv);
                    JOptionPane.showMessageDialog(null, " Flow throw Edges\n " + data + "\n" + "The maximum num of disjoint paths is " + max_flow);
                } else if (AugmintigPathType.getSelectedItem().equals("WidestPathWithLargestKey")) {
                    VertexDisjointPath = new VertexDisjoinPath(ListGraph, source, sink);
                    AdjListGraph RListgraph = VertexDisjointPath.listGraph.creatResidualGraph();
                    int max_flow = VertexDisjointPath.vdp_WidestPathLargestKey(RListgraph, source, sink);
                    data += "The maximum num of disjoint paths is " + max_flow;
                    jTextArea1.setText(data);
                    int numofv = Integer.parseInt(numberOfVertices.getText());
                    data = VertexDisjointPath.listGraph.printFlow(numofv);
                    JOptionPane.showMessageDialog(null, " Flow throw Edges\n " + data + "\n" + "The maximum num of disjoint paths is " + max_flow);
                }
            }
        } else {
            if (selectType.getSelectedItem().equals("Matrix Representation")) {
                int source = Integer.parseInt((String) sourceNodeNumber.getSelectedItem());
                int sink = Integer.parseInt((String) sinkNodeNumber.getSelectedItem());
                MatrixGraph.zeroFlow();
                if (AugmintigPathType.getSelectedItem().equals("BFS")) {
                    
                    AdjMatrixGraph Rgraph = MatrixGraph.createResduialGraph();
                    data += "Running Ford-Fulkerson Algorithm";
                    jTextArea1.setText(data);
                    int max_flow = MatrixGraph.fordFolkersonAlgoUsingBFS(Rgraph, source, sink);
                    data += "The maximum flow is " + max_flow;
                    jTextArea1.setText(data);
                    int numofv = Integer.parseInt(numberOfVertices.getText());
                    data = MatrixGraph.printFlow(numofv);
                    JOptionPane.showMessageDialog(null, " Flow throw Edges \n" + data + "The maximum flow is " + max_flow);
                } else if (AugmintigPathType.getSelectedItem().equals("WidestPath")) {

                    AdjMatrixGraph Rgraph = MatrixGraph.createResduialGraph();
                    int max_flow = MatrixGraph.fordFolkersonAlgoUsingWidestPath(Rgraph, source, sink);
                    data += "The maximum flow is " + max_flow;
                    jTextArea1.setText(data);
                    int numofv = Integer.parseInt(numberOfVertices.getText());
                    data = MatrixGraph.printFlow(numofv);
                    JOptionPane.showMessageDialog(null, " Flow throw Edges \n" + data + "\n" + "The maximum flow is " + max_flow);
                } else if (AugmintigPathType.getSelectedItem().equals("WidestPathWithLargestKey")) {

                    AdjMatrixGraph Rgraph = MatrixGraph.createResduialGraph();
                    int max_flow = MatrixGraph.fordFulkersonWidestPathLargestKey(Rgraph, source, sink);
                    data += "The maximum flow is " + max_flow;
                    jTextArea1.setText(data);
                    int numofv = Integer.parseInt(numberOfVertices.getText());
                    data = MatrixGraph.printFlow(numofv);
                    JOptionPane.showMessageDialog(null, " Flow throw Edges\n " + data + "\n" + "The maximum flow is " + max_flow);
                }
            } else if (selectType.getSelectedItem().equals("List Representation")) {
                int source = Integer.parseInt((String) sourceNodeNumber.getSelectedItem());
                int sink = Integer.parseInt((String) sinkNodeNumber.getSelectedItem());
                ListGraph.zeroFlow();
                if (AugmintigPathType.getSelectedItem().equals("BFS")) {
                   
                    AdjListGraph Rgraph = ListGraph.creatResidualGraph();
                    int max_flow = ListGraph.fordFulkersonAlgousingBFS(Rgraph, source, sink);
                    data += "The maximum flow is " + max_flow;
                    jTextArea1.setText(data);
                    int numofv = Integer.parseInt(numberOfVertices.getText());
                    data =ListGraph.printFlow(numofv);
                    JOptionPane.showMessageDialog(null, " Flow throw Edges\n " + data + "\n" + "The maximum flow is " + max_flow);
                } else if (AugmintigPathType.getSelectedItem().equals("WidestPath")) {
                    AdjListGraph Rgraph = ListGraph.creatResidualGraph();
                    int max_flow = ListGraph.fordFulkersonAlgousingWidestPath(Rgraph, source, sink);
                    data += "The maximum flow is " + max_flow;
                    jTextArea1.setText(data);
                    int numofv = Integer.parseInt(numberOfVertices.getText());
                    data = ListGraph.printFlow(numofv);
                    JOptionPane.showMessageDialog(null, " Flow throw Edges\n " + data + "\n" + "The maximum flow is " + max_flow);
                } else if (AugmintigPathType.getSelectedItem().equals("WidestPathWithLargestKey")) {
                    AdjListGraph Rgraph = ListGraph.creatResidualGraph();
                    int max_flow = ListGraph.fordFulkersonWidestPathLargestKey(Rgraph, source, sink);
                    data += "The maximum flow is " + max_flow;
                    jTextArea1.setText(data);
                    int numofv = Integer.parseInt(numberOfVertices.getText());
                    data = ListGraph.printFlow(numofv);
                    JOptionPane.showMessageDialog(null, " Flow throw Edges\n " + data + "\n" + "The maximum flow is " + max_flow);
                }
            }
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        Welcom w = new Welcom();
        w.setVisible(true);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jDrawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDrawActionPerformed
        // TODO add your handling code here:
        Draw_Graph dr = new Draw_Graph();
        if (jCheckBox1.isSelected()) {
            if (selectType.getSelectedItem().equals("Matrix Representation")) {
                try {
                    dr.createAndShowGui(VertexDisjointPath.matrixGraph);
                } catch (IOException ex) {
                    Logger.getLogger(Manual.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else if (selectType.getSelectedItem().equals("List Representation")) {
                try {
                    dr.createAndShowGui(VertexDisjointPath.listGraph);
                } catch (IOException ex) {
                    Logger.getLogger(Manual.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else if (selectType.getSelectedItem().equals("Matrix Representation")) {
            try {
                dr.createAndShowGui(MatrixGraph);
            } catch (IOException ex) {
                Logger.getLogger(Manual.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (selectType.getSelectedItem().equals("List Representation")) {
            try {
                dr.createAndShowGui(ListGraph);
            } catch (IOException ex) {
                Logger.getLogger(Manual.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_jDrawActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> AugmintigPathType;
    private javax.swing.JTextField capacity;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JButton jDraw;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField numberOfVertices;
    private javax.swing.JComboBox<String> selectType;
    private javax.swing.JComboBox<String> sinkNodeNumber;
    private javax.swing.JComboBox<String> sourceNodeNumber;
    private javax.swing.JComboBox<String> startNode;
    private javax.swing.JComboBox<String> targetNode;
    // End of variables declaration//GEN-END:variables
}
